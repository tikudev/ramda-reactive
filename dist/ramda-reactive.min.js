'use strict'
Object.defineProperty(exports, '__esModule', { value: true })
exports.useDrop =
  exports.useDivide =
  exports.useDissocPath =
  exports.useDissoc =
  exports.useDifferenceWith =
  exports.useDifference =
  exports.useDescend =
  exports.useDefaultTo =
  exports.useDec =
  exports.useCurryN =
  exports.useCurry =
  exports.useCountBy =
  exports.useCount =
  exports.useConverge =
  exports.useConstructN =
  exports.useConstruct =
  exports.useCond =
  exports.useConcat =
  exports.useComposeWith =
  exports.useCompose =
  exports.useComplement =
  exports.useComparator =
  exports.useCollectBy =
  exports.useClone =
  exports.useClamp =
  exports.useChain =
  exports.useCall =
  exports.useBoth =
  exports.useBind =
  exports.useBinary =
  exports.useAssocPath =
  exports.useAssoc =
  exports.useAscend =
  exports.useApplyTo =
  exports.useApplySpec =
  exports.useApply =
  exports.useAppend =
  exports.useAperture =
  exports.useAp =
  exports.useAnyPass =
  exports.useAny =
  exports.useAndThen =
  exports.useAnd =
  exports.useAlways =
  exports.useAllPass =
  exports.useAll =
  exports.useAdjust =
  exports.useAddIndexRight =
  exports.useAddIndex =
  exports.useAdd =
    void 0
exports.useIsEmpty =
  exports.useIs =
  exports.useInvoker =
  exports.useInvertObj =
  exports.useInvert =
  exports.useInto =
  exports.useIntersperse =
  exports.useIntersection =
  exports.useInsertAll =
  exports.useInsert =
  exports.useInnerJoin =
  exports.useInit =
  exports.useIndexOf =
  exports.useIndexBy =
  exports.useIncludes =
  exports.useInc =
  exports.useIfElse =
  exports.useIdentity =
  exports.useIdentical =
  exports.useHead =
  exports.useHasPath =
  exports.useHasIn =
  exports.useHas =
  exports.useGte =
  exports.useGt =
  exports.useGroupWith =
  exports.useGroupBy =
  exports.useFromPairs =
  exports.useForEachObjIndexed =
  exports.useForEach =
  exports.useFlip =
  exports.useFlatten =
  exports.useFindLastIndex =
  exports.useFindLast =
  exports.useFindIndex =
  exports.useFind =
  exports.useFilter =
  exports.useEvolve =
  exports.useEquals =
  exports.useEqProps =
  exports.useEqBy =
  exports.useEndsWith =
  exports.useEmpty =
  exports.useEither =
  exports.useDropWhile =
  exports.useDropRepeatsWith =
  exports.useDropRepeatsBy =
  exports.useDropRepeats =
  exports.useDropLastWhile =
  exports.useDropLast =
    void 0
exports.useNthArg =
  exports.useNth =
  exports.useNot =
  exports.useNone =
  exports.useNegate =
  exports.useNAry =
  exports.useMultiply =
  exports.useMove =
  exports.useModulo =
  exports.useModifyPath =
  exports.useModify =
  exports.useMinBy =
  exports.useMin =
  exports.useMergeWithKey =
  exports.useMergeWith =
  exports.useMergeRight =
  exports.useMergeLeft =
  exports.useMergeDeepWithKey =
  exports.useMergeDeepWith =
  exports.useMergeDeepRight =
  exports.useMergeDeepLeft =
  exports.useMergeAll =
  exports.useMemoizeWith =
  exports.useMedian =
  exports.useMean =
  exports.useMaxBy =
  exports.useMax =
  exports.useMathMod =
  exports.useMatch =
  exports.useMapObjIndexed =
  exports.useMapAccumRight =
  exports.useMapAccum =
  exports.useMap =
  exports.useLte =
  exports.useLt =
  exports.useLiftN =
  exports.useLift =
  exports.useLensProp =
  exports.useLensPath =
  exports.useLensIndex =
  exports.useLens =
  exports.useLength =
  exports.useLastIndexOf =
  exports.useLast =
  exports.useKeysIn =
  exports.useKeys =
  exports.useJuxt =
  exports.useJoin =
  exports.useIsNotNil =
  exports.useIsNil =
    void 0
exports.useSlice =
  exports.useSet =
  exports.useSequence =
  exports.useScan =
  exports.useReverse =
  exports.useReplace =
  exports.useRepeat =
  exports.useRemove =
  exports.useReject =
  exports.useReduced =
  exports.useReduceWhile =
  exports.useReduceRight =
  exports.useReduceBy =
  exports.useReduce =
  exports.useRange =
  exports.useProps =
  exports.usePropSatisfies =
  exports.usePropOr =
  exports.usePropIs =
  exports.usePropEq =
  exports.useProp =
  exports.usePromap =
  exports.useProject =
  exports.useProduct =
  exports.usePrepend =
  exports.usePluck =
  exports.usePipeWith =
  exports.usePipe =
  exports.usePickBy =
  exports.usePickAll =
  exports.usePick =
  exports.usePaths =
  exports.usePathSatisfies =
  exports.usePathOr =
  exports.usePathEq =
  exports.usePath =
  exports.usePartition =
  exports.usePartialRight =
  exports.usePartialObject =
  exports.usePartial =
  exports.usePair =
  exports.useOver =
  exports.useOtherwise =
  exports.useOr =
  exports.useOnce =
  exports.useOn =
  exports.useOmit =
  exports.useOf =
  exports.useObjOf =
  exports.useO =
    void 0
exports.useValues =
  exports.useUseWith =
  exports.useUpdate =
  exports.useUnwind =
  exports.useUntil =
  exports.useUnnest =
  exports.useUnless =
  exports.useUniqWith =
  exports.useUniqBy =
  exports.useUniq =
  exports.useUnionWith =
  exports.useUnion =
  exports.useUnfold =
  exports.useUncurryN =
  exports.useUnary =
  exports.useUnapply =
  exports.useType =
  exports.useTryCatch =
  exports.useTrim =
  exports.useTraverse =
  exports.useTranspose =
  exports.useTransduce =
  exports.useToUpper =
  exports.useToString =
  exports.useToPairsIn =
  exports.useToPairs =
  exports.useToLower =
  exports.useTimes =
  exports.useThunkify =
  exports.useTest =
  exports.useTap =
  exports.useTakeWhile =
  exports.useTakeLastWhile =
  exports.useTakeLast =
  exports.useTake =
  exports.useTail =
  exports.useSymmetricDifferenceWith =
  exports.useSymmetricDifference =
  exports.useSwap =
  exports.useSum =
  exports.useSubtract =
  exports.useStartsWith =
  exports.useSplitWhenever =
  exports.useSplitWhen =
  exports.useSplitEvery =
  exports.useSplitAt =
  exports.useSplit =
  exports.useSortWith =
  exports.useSortBy =
  exports.useSort =
    void 0
exports.useZipWith =
  exports.useZipObj =
  exports.useZip =
  exports.useXprod =
  exports.useXor =
  exports.useWithout =
  exports.useWhereEq =
  exports.useWhereAny =
  exports.useWhere =
  exports.useWhen =
  exports.useView =
  exports.useValuesIn =
    void 0
const vue_1 = require('vue')
const ramda_1 = require('ramda')
exports.useAdd = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.add)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
const useAddIndex = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.addIndex)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useAddIndex = useAddIndex
const useAddIndexRight = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.addIndexRight)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useAddIndexRight = useAddIndexRight
exports.useAdjust = (0, ramda_1.curryN)(3, (idx, fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.adjust)(
      typeof idx === 'function' ? idx() : (0, vue_1.unref)(idx),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useAll = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.all)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useAllPass = (predicates) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.allPass)(
      typeof predicates === 'function'
        ? predicates()
        : (0, vue_1.unref)(predicates)
    )
  )
exports.useAllPass = useAllPass
const useAlways = (val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.always)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
exports.useAlways = useAlways
exports.useAnd = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.and)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useAndThen = (0, ramda_1.curryN)(2, (onSuccess, p) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.andThen)(
      typeof onSuccess === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(onSuccess)(...fnArgs))
        : (0, vue_1.unref)(onSuccess),
      typeof p === 'function' ? p() : (0, vue_1.unref)(p)
    )
  )
)
exports.useAny = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.any)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useAnyPass = (predicates) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.anyPass)(
      typeof predicates === 'function'
        ? predicates()
        : (0, vue_1.unref)(predicates)
    )
  )
exports.useAnyPass = useAnyPass
exports.useAp = (0, ramda_1.curryN)(2, (applyF, applyX) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.ap)(
      typeof applyF === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(applyF)(...fnArgs))
        : (0, vue_1.unref)(applyF),
      typeof applyX === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(applyX)(...fnArgs))
        : (0, vue_1.unref)(applyX)
    )
  )
)
exports.useAperture = (0, ramda_1.curryN)(2, (n, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.aperture)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useAppend = (0, ramda_1.curryN)(2, (el, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.append)(
      typeof el === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(el)(...fnArgs))
        : (0, vue_1.unref)(el),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useApply = (0, ramda_1.curryN)(2, (fn, args) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.apply)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof args === 'function' ? args() : (0, vue_1.unref)(args)
    )
  )
)
const useApplySpec = (spec) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.applySpec)(
      typeof spec === 'function' ? spec() : (0, vue_1.unref)(spec)
    )
  )
exports.useApplySpec = useApplySpec
exports.useApplyTo = (0, ramda_1.curryN)(2, (x, f) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.applyTo)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x),
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f)
    )
  )
)
exports.useAscend = (0, ramda_1.curryN)(3, (fn, a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.ascend)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useAssoc = (0, ramda_1.curryN)(3, (_prop, val, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.assoc)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useAssocPath = (0, ramda_1.curryN)(3, (_path, val, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.assocPath)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
const useBinary = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.binary)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useBinary = useBinary
exports.useBind = (0, ramda_1.curryN)(2, (fn, thisObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.bind)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof thisObj === 'function' ? thisObj() : (0, vue_1.unref)(thisObj)
    )
  )
)
exports.useBoth = (0, ramda_1.curryN)(2, (f, g) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.both)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof g === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(g)(...fnArgs))
        : (0, vue_1.unref)(g)
    )
  )
)
exports.useCall = (0, ramda_1.curryN)(2, (fn, ...args) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.call)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      ...args.map((varArg) =>
        typeof varArg === 'function'
          ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(varArg)(...fnArgs))
          : (0, vue_1.unref)(varArg)
      )
    )
  )
)
exports.useChain = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.chain)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useClamp = (0, ramda_1.curryN)(3, (minimum, maximum, value) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.clamp)(
      typeof minimum === 'function' ? minimum() : (0, vue_1.unref)(minimum),
      typeof maximum === 'function' ? maximum() : (0, vue_1.unref)(maximum),
      typeof value === 'function' ? value() : (0, vue_1.unref)(value)
    )
  )
)
const useClone = (value) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.clone)(
      typeof value === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(value)(...fnArgs))
        : (0, vue_1.unref)(value)
    )
  )
exports.useClone = useClone
exports.useCollectBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.collectBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useComparator = (pred) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.comparator)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred)
    )
  )
exports.useComparator = useComparator
const useComplement = (f) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.complement)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f)
    )
  )
exports.useComplement = useComplement
const useCompose = (...functions) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.compose)(
      ...functions.map((varArg) =>
        typeof varArg === 'function'
          ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(varArg)(...fnArgs))
          : (0, vue_1.unref)(varArg)
      )
    )
  )
exports.useCompose = useCompose
exports.useComposeWith = (0, ramda_1.curryN)(2, (transformer, functions) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.composeWith)(
      typeof transformer === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(transformer)(...fnArgs))
        : (0, vue_1.unref)(transformer),
      typeof functions === 'function'
        ? functions()
        : (0, vue_1.unref)(functions)
    )
  )
)
exports.useConcat = (0, ramda_1.curryN)(2, (firstList, secondList) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.concat)(
      typeof firstList === 'function'
        ? firstList()
        : (0, vue_1.unref)(firstList),
      typeof secondList === 'function'
        ? secondList()
        : (0, vue_1.unref)(secondList)
    )
  )
)
const useCond = (pairs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.cond)(
      typeof pairs === 'function' ? pairs() : (0, vue_1.unref)(pairs)
    )
  )
exports.useCond = useCond
const useConstruct = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.construct)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useConstruct = useConstruct
exports.useConstructN = (0, ramda_1.curryN)(2, (n, Fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.constructN)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof Fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(Fn)(...fnArgs))
        : (0, vue_1.unref)(Fn)
    )
  )
)
exports.useConverge = (0, ramda_1.curryN)(2, (after, functions) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.converge)(
      typeof after === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(after)(...fnArgs))
        : (0, vue_1.unref)(after),
      typeof functions === 'function'
        ? functions()
        : (0, vue_1.unref)(functions)
    )
  )
)
const useCount = (predicate) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.count)(
      typeof predicate === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(predicate)(...fnArgs))
        : (0, vue_1.unref)(predicate)
    )
  )
exports.useCount = useCount
exports.useCountBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.countBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useCurry = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.curry)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useCurry = useCurry
exports.useCurryN = (0, ramda_1.curryN)(2, (_length, fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.curryN)(
      typeof _length === 'function' ? _length() : (0, vue_1.unref)(_length),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
)
const useDec = (n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dec)(typeof n === 'function' ? n() : (0, vue_1.unref)(n))
  )
exports.useDec = useDec
exports.useDefaultTo = (0, ramda_1.curryN)(2, (_default, val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.defaultTo)(
      typeof _default === 'function' ? _default() : (0, vue_1.unref)(_default),
      typeof val === 'function' ? val() : (0, vue_1.unref)(val)
    )
  )
)
exports.useDescend = (0, ramda_1.curryN)(3, (fn, a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.descend)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useDifference = (0, ramda_1.curryN)(2, (list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.difference)(
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useDifferenceWith = (0, ramda_1.curryN)(3, (pred, list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.differenceWith)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useDissoc = (0, ramda_1.curryN)(2, (_prop, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dissoc)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useDissocPath = (0, ramda_1.curryN)(2, (_path, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dissocPath)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useDivide = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.divide)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
exports.useDrop = (0, ramda_1.curryN)(2, (n, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.drop)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
exports.useDropLast = (0, ramda_1.curryN)(2, (n, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropLast)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useDropLastWhile = (0, ramda_1.curryN)(2, (predicate, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropLastWhile)(
      typeof predicate === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(predicate)(...fnArgs))
        : (0, vue_1.unref)(predicate),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
const useDropRepeats = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropRepeats)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useDropRepeats = useDropRepeats
exports.useDropRepeatsBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropRepeatsBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useDropRepeatsWith = (0, ramda_1.curryN)(2, (pred, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropRepeatsWith)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useDropWhile = (0, ramda_1.curryN)(2, (fn, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.dropWhile)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
exports.useEither = (0, ramda_1.curryN)(2, (f, g) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.either)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof g === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(g)(...fnArgs))
        : (0, vue_1.unref)(g)
    )
  )
)
const useEmpty = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.empty)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useEmpty = useEmpty
exports.useEndsWith = (0, ramda_1.curryN)(2, (suffix, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.endsWith)(
      typeof suffix === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(suffix)(...fnArgs))
        : (0, vue_1.unref)(suffix),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
exports.useEqBy = (0, ramda_1.curryN)(3, (f, x, y) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.eqBy)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x),
      typeof y === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(y)(...fnArgs))
        : (0, vue_1.unref)(y)
    )
  )
)
exports.useEqProps = (0, ramda_1.curryN)(3, (_prop, obj1, obj2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.eqProps)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof obj1 === 'function' ? obj1() : (0, vue_1.unref)(obj1),
      typeof obj2 === 'function' ? obj2() : (0, vue_1.unref)(obj2)
    )
  )
)
exports.useEquals = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.equals)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useEvolve = (0, ramda_1.curryN)(2, (transformations, object) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.evolve)(
      typeof transformations === 'function'
        ? transformations()
        : (0, vue_1.unref)(transformations),
      typeof object === 'function' ? object() : (0, vue_1.unref)(object)
    )
  )
)
exports.useFilter = (0, ramda_1.curryN)(2, (pred, filterable) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.filter)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof filterable === 'function'
        ? filterable()
        : (0, vue_1.unref)(filterable)
    )
  )
)
exports.useFind = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.find)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useFindIndex = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.findIndex)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useFindLast = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.findLast)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useFindLastIndex = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.findLastIndex)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useFlatten = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.flatten)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useFlatten = useFlatten
const useFlip = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.flip)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useFlip = useFlip
exports.useForEach = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.forEach)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useForEachObjIndexed = (0, ramda_1.curryN)(2, (fn, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.forEachObjIndexed)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
const useFromPairs = (pairs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.fromPairs)(
      typeof pairs === 'function' ? pairs() : (0, vue_1.unref)(pairs)
    )
  )
exports.useFromPairs = useFromPairs
exports.useGroupBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.groupBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useGroupWith = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.groupWith)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useGt = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.gt)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useGte = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.gte)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
exports.useHas = (0, ramda_1.curryN)(2, (_prop, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.has)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useHasIn = (0, ramda_1.curryN)(2, (_prop, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.hasIn)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useHasPath = (0, ramda_1.curryN)(2, (_path, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.hasPath)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
const useHead = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.head)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useHead = useHead
exports.useIdentical = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.identical)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
const useIdentity = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.identity)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useIdentity = useIdentity
exports.useIfElse = (0, ramda_1.curryN)(3, (condition, onTrue, onFalse) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.ifElse)(
      typeof condition === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(condition)(...fnArgs))
        : (0, vue_1.unref)(condition),
      typeof onTrue === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(onTrue)(...fnArgs))
        : (0, vue_1.unref)(onTrue),
      typeof onFalse === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(onFalse)(...fnArgs))
        : (0, vue_1.unref)(onFalse)
    )
  )
)
const useInc = (n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.inc)(typeof n === 'function' ? n() : (0, vue_1.unref)(n))
  )
exports.useInc = useInc
exports.useIncludes = (0, ramda_1.curryN)(2, (a, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.includes)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useIndexBy = (0, ramda_1.curryN)(2, (fn, array) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.indexBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof array === 'function' ? array() : (0, vue_1.unref)(array)
    )
  )
)
exports.useIndexOf = (0, ramda_1.curryN)(2, (target, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.indexOf)(
      typeof target === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(target)(...fnArgs))
        : (0, vue_1.unref)(target),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
const useInit = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.init)(
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
exports.useInit = useInit
exports.useInnerJoin = (0, ramda_1.curryN)(3, (pred, xs, ys) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.innerJoin)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs),
      typeof ys === 'function' ? ys() : (0, vue_1.unref)(ys)
    )
  )
)
exports.useInsert = (0, ramda_1.curryN)(3, (index, elt, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.insert)(
      typeof index === 'function' ? index() : (0, vue_1.unref)(index),
      typeof elt === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(elt)(...fnArgs))
        : (0, vue_1.unref)(elt),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useInsertAll = (0, ramda_1.curryN)(3, (index, elts, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.insertAll)(
      typeof index === 'function' ? index() : (0, vue_1.unref)(index),
      typeof elts === 'function' ? elts() : (0, vue_1.unref)(elts),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useIntersection = (0, ramda_1.curryN)(2, (list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.intersection)(
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useIntersperse = (0, ramda_1.curryN)(2, (separator, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.intersperse)(
      typeof separator === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(separator)(...fnArgs))
        : (0, vue_1.unref)(separator),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useInto = (0, ramda_1.curryN)(3, (acc, xf, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.into)(
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof xf === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(xf)(...fnArgs))
        : (0, vue_1.unref)(xf),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useInvert = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.invert)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useInvert = useInvert
const useInvertObj = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.invertObj)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useInvertObj = useInvertObj
exports.useInvoker = (0, ramda_1.curryN)(2, (arity, method) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.invoker)(
      typeof arity === 'function' ? arity() : (0, vue_1.unref)(arity),
      typeof method === 'function' ? method() : (0, vue_1.unref)(method)
    )
  )
)
exports.useIs = (0, ramda_1.curryN)(2, (ctor, val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.is)(
      typeof ctor === 'function' ? ctor() : (0, vue_1.unref)(ctor),
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
)
const useIsEmpty = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.isEmpty)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useIsEmpty = useIsEmpty
const useIsNil = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.isNil)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useIsNil = useIsNil
const useIsNotNil = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.isNotNil)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useIsNotNil = useIsNotNil
exports.useJoin = (0, ramda_1.curryN)(2, (separator, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.join)(
      typeof separator === 'function'
        ? separator()
        : (0, vue_1.unref)(separator),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
const useJuxt = (fns) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.juxt)(typeof fns === 'function' ? fns() : (0, vue_1.unref)(fns))
  )
exports.useJuxt = useJuxt
const useKeys = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.keys)(typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj))
  )
exports.useKeys = useKeys
const useKeysIn = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.keysIn)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useKeysIn = useKeysIn
const useLast = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.last)(
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
exports.useLast = useLast
exports.useLastIndexOf = (0, ramda_1.curryN)(2, (target, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lastIndexOf)(
      typeof target === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(target)(...fnArgs))
        : (0, vue_1.unref)(target),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
const useLength = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.length)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useLength = useLength
exports.useLens = (0, ramda_1.curryN)(2, (getter, setter) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lens)(
      typeof getter === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(getter)(...fnArgs))
        : (0, vue_1.unref)(getter),
      typeof setter === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(setter)(...fnArgs))
        : (0, vue_1.unref)(setter)
    )
  )
)
const useLensIndex = (n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lensIndex)(typeof n === 'function' ? n() : (0, vue_1.unref)(n))
  )
exports.useLensIndex = useLensIndex
const useLensPath = (_path) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lensPath)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path)
    )
  )
exports.useLensPath = useLensPath
const useLensProp = (k) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lensProp)(typeof k === 'function' ? k() : (0, vue_1.unref)(k))
  )
exports.useLensProp = useLensProp
const useLift = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lift)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useLift = useLift
const useLiftN = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.liftN)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useLiftN = useLiftN
exports.useLt = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lt)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useLte = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.lte)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
exports.useMap = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.map)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useMapAccum = (0, ramda_1.curryN)(3, (fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mapAccum)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useMapAccumRight = (0, ramda_1.curryN)(3, (fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mapAccumRight)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useMapObjIndexed = (0, ramda_1.curryN)(2, (fn, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mapObjIndexed)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useMatch = (0, ramda_1.curryN)(2, (rx, str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.match)(
      typeof rx === 'function' ? rx() : (0, vue_1.unref)(rx),
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
)
exports.useMathMod = (0, ramda_1.curryN)(2, (m, p) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mathMod)(
      typeof m === 'function' ? m() : (0, vue_1.unref)(m),
      typeof p === 'function' ? p() : (0, vue_1.unref)(p)
    )
  )
)
exports.useMax = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.max)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useMaxBy = (0, ramda_1.curryN)(3, (f, a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.maxBy)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
const useMean = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mean)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useMean = useMean
const useMedian = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.median)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useMedian = useMedian
exports.useMemoizeWith = (0, ramda_1.curryN)(2, (keyGen, fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.memoizeWith)(
      typeof keyGen === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(keyGen)(...fnArgs))
        : (0, vue_1.unref)(keyGen),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
)
const useMergeAll = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeAll)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useMergeAll = useMergeAll
exports.useMergeDeepLeft = (0, ramda_1.curryN)(2, (lObj, rObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeDeepLeft)(
      typeof lObj === 'function' ? lObj() : (0, vue_1.unref)(lObj),
      typeof rObj === 'function' ? rObj() : (0, vue_1.unref)(rObj)
    )
  )
)
exports.useMergeDeepRight = (0, ramda_1.curryN)(2, (lObj, rObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeDeepRight)(
      typeof lObj === 'function' ? lObj() : (0, vue_1.unref)(lObj),
      typeof rObj === 'function' ? rObj() : (0, vue_1.unref)(rObj)
    )
  )
)
exports.useMergeDeepWith = (0, ramda_1.curryN)(3, (fn, lObj, rObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeDeepWith)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof lObj === 'function' ? lObj() : (0, vue_1.unref)(lObj),
      typeof rObj === 'function' ? rObj() : (0, vue_1.unref)(rObj)
    )
  )
)
exports.useMergeDeepWithKey = (0, ramda_1.curryN)(3, (fn, lObj, rObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeDeepWithKey)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof lObj === 'function' ? lObj() : (0, vue_1.unref)(lObj),
      typeof rObj === 'function' ? rObj() : (0, vue_1.unref)(rObj)
    )
  )
)
exports.useMergeLeft = (0, ramda_1.curryN)(2, (l, r) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeLeft)(
      typeof l === 'function' ? l() : (0, vue_1.unref)(l),
      typeof r === 'function' ? r() : (0, vue_1.unref)(r)
    )
  )
)
exports.useMergeRight = (0, ramda_1.curryN)(2, (l, r) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeRight)(
      typeof l === 'function' ? l() : (0, vue_1.unref)(l),
      typeof r === 'function' ? r() : (0, vue_1.unref)(r)
    )
  )
)
exports.useMergeWith = (0, ramda_1.curryN)(3, (fn, l, r) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeWith)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof l === 'function' ? l() : (0, vue_1.unref)(l),
      typeof r === 'function' ? r() : (0, vue_1.unref)(r)
    )
  )
)
exports.useMergeWithKey = (0, ramda_1.curryN)(3, (fn, l, r) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.mergeWithKey)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof l === 'function' ? l() : (0, vue_1.unref)(l),
      typeof r === 'function' ? r() : (0, vue_1.unref)(r)
    )
  )
)
exports.useMin = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.min)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useMinBy = (0, ramda_1.curryN)(3, (f, a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.minBy)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useModify = (0, ramda_1.curryN)(3, (_prop, fn, object) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.modify)(
      typeof _prop === 'function' ? _prop() : (0, vue_1.unref)(_prop),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof object === 'function' ? object() : (0, vue_1.unref)(object)
    )
  )
)
exports.useModifyPath = (0, ramda_1.curryN)(3, (_path, fn, object) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.modifyPath)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof object === 'function' ? object() : (0, vue_1.unref)(object)
    )
  )
)
exports.useModulo = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.modulo)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
exports.useMove = (0, ramda_1.curryN)(3, (from, to, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.move)(
      typeof from === 'function' ? from() : (0, vue_1.unref)(from),
      typeof to === 'function' ? to() : (0, vue_1.unref)(to),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useMultiply = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.multiply)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
exports.useNAry = (0, ramda_1.curryN)(2, (n, fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.nAry)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
)
const useNegate = (n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.negate)(typeof n === 'function' ? n() : (0, vue_1.unref)(n))
  )
exports.useNegate = useNegate
exports.useNone = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.none)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useNot = (a) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.not)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a)
    )
  )
exports.useNot = useNot
exports.useNth = (0, ramda_1.curryN)(2, (offset, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.nth)(
      typeof offset === 'function' ? offset() : (0, vue_1.unref)(offset),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
const useNthArg = (n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.nthArg)(typeof n === 'function' ? n() : (0, vue_1.unref)(n))
  )
exports.useNthArg = useNthArg
exports.useO = (0, ramda_1.curryN)(2, (f, g) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.o)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof g === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(g)(...fnArgs))
        : (0, vue_1.unref)(g)
    )
  )
)
exports.useObjOf = (0, ramda_1.curryN)(2, (key, val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.objOf)(
      typeof key === 'function' ? key() : (0, vue_1.unref)(key),
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
)
exports.useOf = (0, ramda_1.curryN)(2, (Ctor, val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.of)(
      typeof Ctor === 'function' ? Ctor() : (0, vue_1.unref)(Ctor),
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
)
exports.useOmit = (0, ramda_1.curryN)(2, (names, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.omit)(
      typeof names === 'function' ? names() : (0, vue_1.unref)(names),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useOn = (0, ramda_1.curryN)(4, (f, g, a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.on)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof g === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(g)(...fnArgs))
        : (0, vue_1.unref)(g),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
const useOnce = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.once)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useOnce = useOnce
exports.useOr = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.or)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useOtherwise = (0, ramda_1.curryN)(2, (onFailure, p) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.otherwise)(
      typeof onFailure === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(onFailure)(...fnArgs))
        : (0, vue_1.unref)(onFailure),
      typeof p === 'function' ? p() : (0, vue_1.unref)(p)
    )
  )
)
exports.useOver = (0, ramda_1.curryN)(3, (_lens, v, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.over)(
      typeof _lens === 'function' ? _lens() : (0, vue_1.unref)(_lens),
      typeof v === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(v)(...fnArgs))
        : (0, vue_1.unref)(v),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
exports.usePair = (0, ramda_1.curryN)(2, (fst, snd) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pair)(
      typeof fst === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fst)(...fnArgs))
        : (0, vue_1.unref)(fst),
      typeof snd === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(snd)(...fnArgs))
        : (0, vue_1.unref)(snd)
    )
  )
)
exports.usePartial = (0, ramda_1.curryN)(2, (f, args) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.partial)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof args === 'function' ? args() : (0, vue_1.unref)(args)
    )
  )
)
exports.usePartialObject = (0, ramda_1.curryN)(2, (f, _props) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.partialObject)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof _props === 'function' ? _props() : (0, vue_1.unref)(_props)
    )
  )
)
exports.usePartialRight = (0, ramda_1.curryN)(2, (f, args) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.partialRight)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof args === 'function' ? args() : (0, vue_1.unref)(args)
    )
  )
)
exports.usePartition = (0, ramda_1.curryN)(2, (pred, filterable) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.partition)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof filterable === 'function'
        ? filterable()
        : (0, vue_1.unref)(filterable)
    )
  )
)
exports.usePath = (0, ramda_1.curryN)(2, (_path, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.path)(
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePathEq = (0, ramda_1.curryN)(3, (val, _path, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pathEq)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val),
      typeof _path === 'function' ? _path() : (0, vue_1.unref)(_path),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePathOr = (0, ramda_1.curryN)(3, (d, p, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pathOr)(
      typeof d === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(d)(...fnArgs))
        : (0, vue_1.unref)(d),
      typeof p === 'function' ? p() : (0, vue_1.unref)(p),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePathSatisfies = (0, ramda_1.curryN)(3, (pred, propPath, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pathSatisfies)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof propPath === 'function' ? propPath() : (0, vue_1.unref)(propPath),
      typeof obj === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(obj)(...fnArgs))
        : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePaths = (0, ramda_1.curryN)(2, (pathsArray, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.paths)(
      typeof pathsArray === 'function'
        ? pathsArray()
        : (0, vue_1.unref)(pathsArray),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePick = (0, ramda_1.curryN)(2, (names, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pick)(
      typeof names === 'function' ? names() : (0, vue_1.unref)(names),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePickAll = (0, ramda_1.curryN)(2, (names, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pickAll)(
      typeof names === 'function' ? names() : (0, vue_1.unref)(names),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePickBy = (0, ramda_1.curryN)(2, (pred, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pickBy)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
const usePipe = (...functions) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pipe)(
      ...functions.map((varArg) =>
        typeof varArg === 'function'
          ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(varArg)(...fnArgs))
          : (0, vue_1.unref)(varArg)
      )
    )
  )
exports.usePipe = usePipe
exports.usePipeWith = (0, ramda_1.curryN)(2, (transformer, functions) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pipeWith)(
      typeof transformer === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(transformer)(...fnArgs))
        : (0, vue_1.unref)(transformer),
      typeof functions === 'function'
        ? functions()
        : (0, vue_1.unref)(functions)
    )
  )
)
exports.usePluck = (0, ramda_1.curryN)(2, (key, f) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.pluck)(
      typeof key === 'function' ? key() : (0, vue_1.unref)(key),
      typeof f === 'function' ? f() : (0, vue_1.unref)(f)
    )
  )
)
exports.usePrepend = (0, ramda_1.curryN)(2, (el, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.prepend)(
      typeof el === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(el)(...fnArgs))
        : (0, vue_1.unref)(el),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useProduct = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.product)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useProduct = useProduct
exports.useProject = (0, ramda_1.curryN)(2, (_props, objs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.project)(
      typeof _props === 'function' ? _props() : (0, vue_1.unref)(_props),
      typeof objs === 'function' ? objs() : (0, vue_1.unref)(objs)
    )
  )
)
exports.usePromap = (0, ramda_1.curryN)(3, (f, g, profunctor) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.promap)(
      typeof f === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
        : (0, vue_1.unref)(f),
      typeof g === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(g)(...fnArgs))
        : (0, vue_1.unref)(g),
      typeof profunctor === 'function'
        ? profunctor()
        : (0, vue_1.unref)(profunctor)
    )
  )
)
exports.useProp = (0, ramda_1.curryN)(2, (p, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.prop)(
      typeof p === 'function' ? p() : (0, vue_1.unref)(p),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePropEq = (0, ramda_1.curryN)(3, (val, name, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.propEq)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val),
      typeof name === 'function' ? name() : (0, vue_1.unref)(name),
      typeof obj === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(obj)(...fnArgs))
        : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePropIs = (0, ramda_1.curryN)(3, (_type, name, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.propIs)(
      typeof _type === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(_type)(...fnArgs))
        : (0, vue_1.unref)(_type),
      typeof name === 'function' ? name() : (0, vue_1.unref)(name),
      typeof obj === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(obj)(...fnArgs))
        : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePropOr = (0, ramda_1.curryN)(3, (val, p, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.propOr)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val),
      typeof p === 'function' ? p() : (0, vue_1.unref)(p),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.usePropSatisfies = (0, ramda_1.curryN)(3, (pred, name, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.propSatisfies)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof name === 'function' ? name() : (0, vue_1.unref)(name),
      typeof obj === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(obj)(...fnArgs))
        : (0, vue_1.unref)(obj)
    )
  )
)
exports.useProps = (0, ramda_1.curryN)(2, (ps, obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.props)(
      typeof ps === 'function' ? ps() : (0, vue_1.unref)(ps),
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
)
exports.useRange = (0, ramda_1.curryN)(2, (from, to) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.range)(
      typeof from === 'function' ? from() : (0, vue_1.unref)(from),
      typeof to === 'function' ? to() : (0, vue_1.unref)(to)
    )
  )
)
exports.useReduce = (0, ramda_1.curryN)(3, (fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reduce)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useReduceBy = (0, ramda_1.curryN)(4, (valueFn, acc, keyFn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reduceBy)(
      typeof valueFn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(valueFn)(...fnArgs))
        : (0, vue_1.unref)(valueFn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof keyFn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(keyFn)(...fnArgs))
        : (0, vue_1.unref)(keyFn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useReduceRight = (0, ramda_1.curryN)(3, (fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reduceRight)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useReduceWhile = (0, ramda_1.curryN)(4, (pred, fn, a, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reduceWhile)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useReduced = (x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reduced)(
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
exports.useReduced = useReduced
exports.useReject = (0, ramda_1.curryN)(2, (pred, filterable) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reject)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof filterable === 'function'
        ? filterable()
        : (0, vue_1.unref)(filterable)
    )
  )
)
exports.useRemove = (0, ramda_1.curryN)(3, (start, _count, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.remove)(
      typeof start === 'function' ? start() : (0, vue_1.unref)(start),
      typeof _count === 'function' ? _count() : (0, vue_1.unref)(_count),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useRepeat = (0, ramda_1.curryN)(2, (value, n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.repeat)(
      typeof value === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(value)(...fnArgs))
        : (0, vue_1.unref)(value),
      typeof n === 'function' ? n() : (0, vue_1.unref)(n)
    )
  )
)
exports.useReplace = (0, ramda_1.curryN)(3, (pattern, replacement, str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.replace)(
      typeof pattern === 'function' ? pattern() : (0, vue_1.unref)(pattern),
      typeof replacement === 'function'
        ? replacement()
        : (0, vue_1.unref)(replacement),
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
)
const useReverse = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.reverse)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useReverse = useReverse
exports.useScan = (0, ramda_1.curryN)(3, (fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.scan)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSequence = (0, ramda_1.curryN)(
  2,
  (TypeRepresentative, traversable) =>
    (0, vue_1.computed)(() =>
      (0, ramda_1.sequence)(
        typeof TypeRepresentative === 'function'
          ? (...fnArgs) =>
              (0, vue_1.unref)((0, vue_1.unref)(TypeRepresentative)(...fnArgs))
          : (0, vue_1.unref)(TypeRepresentative),
        typeof traversable === 'function'
          ? (...fnArgs) =>
              (0, vue_1.unref)((0, vue_1.unref)(traversable)(...fnArgs))
          : (0, vue_1.unref)(traversable)
      )
    )
)
exports.useSet = (0, ramda_1.curryN)(3, (_lens, v, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.set)(
      typeof _lens === 'function' ? _lens() : (0, vue_1.unref)(_lens),
      typeof v === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(v)(...fnArgs))
        : (0, vue_1.unref)(v),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
exports.useSlice = (0, ramda_1.curryN)(3, (fromIndex, toIndex, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.slice)(
      typeof fromIndex === 'function'
        ? fromIndex()
        : (0, vue_1.unref)(fromIndex),
      typeof toIndex === 'function' ? toIndex() : (0, vue_1.unref)(toIndex),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
exports.useSort = (0, ramda_1.curryN)(2, (_comparator, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.sort)(
      typeof _comparator === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(_comparator)(...fnArgs))
        : (0, vue_1.unref)(_comparator),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSortBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.sortBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSortWith = (0, ramda_1.curryN)(2, (functions, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.sortWith)(
      typeof functions === 'function'
        ? functions()
        : (0, vue_1.unref)(functions),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSplit = (0, ramda_1.curryN)(2, (sep, str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.split)(
      typeof sep === 'function' ? sep() : (0, vue_1.unref)(sep),
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
)
exports.useSplitAt = (0, ramda_1.curryN)(2, (index, array) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.splitAt)(
      typeof index === 'function' ? index() : (0, vue_1.unref)(index),
      typeof array === 'function' ? array() : (0, vue_1.unref)(array)
    )
  )
)
exports.useSplitEvery = (0, ramda_1.curryN)(2, (n, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.splitEvery)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSplitWhen = (0, ramda_1.curryN)(2, (pred, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.splitWhen)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useSplitWhenever = (0, ramda_1.curryN)(2, (pred, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.splitWhenever)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useStartsWith = (0, ramda_1.curryN)(2, (prefix, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.startsWith)(
      typeof prefix === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(prefix)(...fnArgs))
        : (0, vue_1.unref)(prefix),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
exports.useSubtract = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.subtract)(
      typeof a === 'function' ? a() : (0, vue_1.unref)(a),
      typeof b === 'function' ? b() : (0, vue_1.unref)(b)
    )
  )
)
const useSum = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.sum)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useSum = useSum
exports.useSwap = (0, ramda_1.curryN)(3, (indexA, indexB, _o) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.swap)(
      typeof indexA === 'function' ? indexA() : (0, vue_1.unref)(indexA),
      typeof indexB === 'function' ? indexB() : (0, vue_1.unref)(indexB),
      typeof _o === 'function' ? _o() : (0, vue_1.unref)(_o)
    )
  )
)
exports.useSymmetricDifference = (0, ramda_1.curryN)(2, (list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.symmetricDifference)(
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useSymmetricDifferenceWith = (0, ramda_1.curryN)(
  3,
  (pred, list1, list2) =>
    (0, vue_1.computed)(() =>
      (0, ramda_1.symmetricDifferenceWith)(
        typeof pred === 'function'
          ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
          : (0, vue_1.unref)(pred),
        typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
        typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
      )
    )
)
const useTail = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.tail)(
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
exports.useTail = useTail
exports.useTake = (0, ramda_1.curryN)(2, (n, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.take)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
)
exports.useTakeLast = (0, ramda_1.curryN)(2, (n, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.takeLast)(
      typeof n === 'function' ? n() : (0, vue_1.unref)(n),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
exports.useTakeLastWhile = (0, ramda_1.curryN)(2, (fn, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.takeLastWhile)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
exports.useTakeWhile = (0, ramda_1.curryN)(2, (fn, xs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.takeWhile)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof xs === 'function' ? xs() : (0, vue_1.unref)(xs)
    )
  )
)
exports.useTap = (0, ramda_1.curryN)(2, (fn, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.tap)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
exports.useTest = (0, ramda_1.curryN)(2, (pattern, str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.test)(
      typeof pattern === 'function' ? pattern() : (0, vue_1.unref)(pattern),
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
)
const useThunkify = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.thunkify)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useThunkify = useThunkify
exports.useTimes = (0, ramda_1.curryN)(2, (fn, n) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.times)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof n === 'function' ? n() : (0, vue_1.unref)(n)
    )
  )
)
const useToLower = (str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.toLower)(
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
exports.useToLower = useToLower
const useToPairs = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.toPairs)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useToPairs = useToPairs
const useToPairsIn = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.toPairsIn)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useToPairsIn = useToPairsIn
const useToString = (val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.toString)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
exports.useToString = useToString
const useToUpper = (str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.toUpper)(
      typeof str === 'function' ? str() : (0, vue_1.unref)(str)
    )
  )
exports.useToUpper = useToUpper
exports.useTransduce = (0, ramda_1.curryN)(4, (xf, fn, acc, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.transduce)(
      typeof xf === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(xf)(...fnArgs))
        : (0, vue_1.unref)(xf),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof acc === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(acc)(...fnArgs))
        : (0, vue_1.unref)(acc),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
const useTranspose = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.transpose)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useTranspose = useTranspose
exports.useTraverse = (0, ramda_1.curryN)(
  3,
  (TypeRepresentative, f, traversable) =>
    (0, vue_1.computed)(() =>
      (0, ramda_1.traverse)(
        typeof TypeRepresentative === 'function'
          ? (...fnArgs) =>
              (0, vue_1.unref)((0, vue_1.unref)(TypeRepresentative)(...fnArgs))
          : (0, vue_1.unref)(TypeRepresentative),
        typeof f === 'function'
          ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(f)(...fnArgs))
          : (0, vue_1.unref)(f),
        typeof traversable === 'function'
          ? (...fnArgs) =>
              (0, vue_1.unref)((0, vue_1.unref)(traversable)(...fnArgs))
          : (0, vue_1.unref)(traversable)
      )
    )
)
const useTrim = (str) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.trim)(typeof str === 'function' ? str() : (0, vue_1.unref)(str))
  )
exports.useTrim = useTrim
exports.useTryCatch = (0, ramda_1.curryN)(2, (tryer, catcher) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.tryCatch)(
      typeof tryer === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(tryer)(...fnArgs))
        : (0, vue_1.unref)(tryer),
      typeof catcher === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(catcher)(...fnArgs))
        : (0, vue_1.unref)(catcher)
    )
  )
)
const useType = (val) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.type)(
      typeof val === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(val)(...fnArgs))
        : (0, vue_1.unref)(val)
    )
  )
exports.useType = useType
const useUnapply = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unapply)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useUnapply = useUnapply
const useUnary = (fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unary)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
exports.useUnary = useUnary
exports.useUncurryN = (0, ramda_1.curryN)(2, (_length, fn) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.uncurryN)(
      typeof _length === 'function' ? _length() : (0, vue_1.unref)(_length),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn)
    )
  )
)
exports.useUnfold = (0, ramda_1.curryN)(2, (fn, seed) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unfold)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof seed === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(seed)(...fnArgs))
        : (0, vue_1.unref)(seed)
    )
  )
)
exports.useUnion = (0, ramda_1.curryN)(2, (as, bs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.union)(
      typeof as === 'function' ? as() : (0, vue_1.unref)(as),
      typeof bs === 'function' ? bs() : (0, vue_1.unref)(bs)
    )
  )
)
exports.useUnionWith = (0, ramda_1.curryN)(3, (pred, list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unionWith)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
const useUniq = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.uniq)(
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
exports.useUniq = useUniq
exports.useUniqBy = (0, ramda_1.curryN)(2, (fn, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.uniqBy)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useUniqWith = (0, ramda_1.curryN)(2, (pred, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.uniqWith)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useUnless = (0, ramda_1.curryN)(3, (pred, whenFalseFn, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unless)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof whenFalseFn === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(whenFalseFn)(...fnArgs))
        : (0, vue_1.unref)(whenFalseFn),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
const useUnnest = (list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unnest)(
      typeof list === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(list)(...fnArgs))
        : (0, vue_1.unref)(list)
    )
  )
exports.useUnnest = useUnnest
exports.useUntil = (0, ramda_1.curryN)(3, (pred, fn, _init) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.until)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof _init === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(_init)(...fnArgs))
        : (0, vue_1.unref)(_init)
    )
  )
)
exports.useUnwind = (0, ramda_1.curryN)(2, (key, object) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.unwind)(
      typeof key === 'function' ? key() : (0, vue_1.unref)(key),
      typeof object === 'function' ? object() : (0, vue_1.unref)(object)
    )
  )
)
exports.useUpdate = (0, ramda_1.curryN)(3, (idx, x, list) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.update)(
      typeof idx === 'function' ? idx() : (0, vue_1.unref)(idx),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x),
      typeof list === 'function' ? list() : (0, vue_1.unref)(list)
    )
  )
)
exports.useUseWith = (0, ramda_1.curryN)(2, (fn, transformers) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.useWith)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof transformers === 'function'
        ? transformers()
        : (0, vue_1.unref)(transformers)
    )
  )
)
const useValues = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.values)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useValues = useValues
const useValuesIn = (obj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.valuesIn)(
      typeof obj === 'function' ? obj() : (0, vue_1.unref)(obj)
    )
  )
exports.useValuesIn = useValuesIn
exports.useView = (0, ramda_1.curryN)(2, (_lens, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.view)(
      typeof _lens === 'function' ? _lens() : (0, vue_1.unref)(_lens),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
exports.useWhen = (0, ramda_1.curryN)(3, (pred, whenTrueFn, x) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.when)(
      typeof pred === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(pred)(...fnArgs))
        : (0, vue_1.unref)(pred),
      typeof whenTrueFn === 'function'
        ? (...fnArgs) =>
            (0, vue_1.unref)((0, vue_1.unref)(whenTrueFn)(...fnArgs))
        : (0, vue_1.unref)(whenTrueFn),
      typeof x === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(x)(...fnArgs))
        : (0, vue_1.unref)(x)
    )
  )
)
exports.useWhere = (0, ramda_1.curryN)(2, (spec, testObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.where)(
      typeof spec === 'function' ? spec() : (0, vue_1.unref)(spec),
      typeof testObj === 'function' ? testObj() : (0, vue_1.unref)(testObj)
    )
  )
)
exports.useWhereAny = (0, ramda_1.curryN)(2, (spec, testObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.whereAny)(
      typeof spec === 'function' ? spec() : (0, vue_1.unref)(spec),
      typeof testObj === 'function' ? testObj() : (0, vue_1.unref)(testObj)
    )
  )
)
exports.useWhereEq = (0, ramda_1.curryN)(2, (spec, testObj) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.whereEq)(
      typeof spec === 'function' ? spec() : (0, vue_1.unref)(spec),
      typeof testObj === 'function' ? testObj() : (0, vue_1.unref)(testObj)
    )
  )
)
exports.useWithout = (0, ramda_1.curryN)(2, (list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.without)(
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useXor = (0, ramda_1.curryN)(2, (a, b) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.xor)(
      typeof a === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(a)(...fnArgs))
        : (0, vue_1.unref)(a),
      typeof b === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(b)(...fnArgs))
        : (0, vue_1.unref)(b)
    )
  )
)
exports.useXprod = (0, ramda_1.curryN)(2, (as, bs) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.xprod)(
      typeof as === 'function' ? as() : (0, vue_1.unref)(as),
      typeof bs === 'function' ? bs() : (0, vue_1.unref)(bs)
    )
  )
)
exports.useZip = (0, ramda_1.curryN)(2, (list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.zip)(
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
exports.useZipObj = (0, ramda_1.curryN)(2, (_keys, _values) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.zipObj)(
      typeof _keys === 'function' ? _keys() : (0, vue_1.unref)(_keys),
      typeof _values === 'function' ? _values() : (0, vue_1.unref)(_values)
    )
  )
)
exports.useZipWith = (0, ramda_1.curryN)(3, (fn, list1, list2) =>
  (0, vue_1.computed)(() =>
    (0, ramda_1.zipWith)(
      typeof fn === 'function'
        ? (...fnArgs) => (0, vue_1.unref)((0, vue_1.unref)(fn)(...fnArgs))
        : (0, vue_1.unref)(fn),
      typeof list1 === 'function' ? list1() : (0, vue_1.unref)(list1),
      typeof list2 === 'function' ? list2() : (0, vue_1.unref)(list2)
    )
  )
)
