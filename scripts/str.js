export const capitalizeFirstLetter = str =>
  str.charAt(0).toUpperCase() + str.slice(1)

export const prependStar = str => ' * ' + str.replaceAll('\n', '\n * ')

export const jsReservedWords = [
  'await',
  'break',
  'case',
  'catch',
  'class',
  'const',
  'continue',
  'debugger',
  'default',
  'delete',
  'do',
  'else',
  'enum',
  'export',
  'extends',
  'false',
  'finally',
  'for',
  'function',
  'if',
  'implements',
  'import',
  'in',
  'instanceof',
  'interface',
  'let',
  'new',
  'null',
  'package',
  'private',
  'protected',
  'public',
  'return',
  'super',
  'switch',
  'static',
  'this',
  'throw',
  'try',
  'True',
  'typeof',
  'var',
  'void',
  'while',
  'with',
  'yield',
]

const ramdaFnNames = [
  'add',
  'addIndex',
  'addIndexRight',
  'adjust',
  'all',
  'allPass',
  'always',
  'and',
  'andThen',
  'any',
  'anyPass',
  'ap',
  'aperture',
  'append',
  'apply',
  'applySpec',
  'applyTo',
  'ascend',
  'assoc',
  'assocPath',
  'binary',
  'bind',
  'both',
  'call',
  'chain',
  'clamp',
  'clone',
  'collectBy',
  'comparator',
  'complement',
  'compose',
  'composeWith',
  'concat',
  'cond',
  'construct',
  'constructN',
  'converge',
  'count',
  'countBy',
  'curry',
  'curryN',
  'dec',
  'defaultTo',
  'descend',
  'difference',
  'differenceWith',
  'dissoc',
  'dissocPath',
  'divide',
  'drop',
  'dropLast',
  'dropLastWhile',
  'dropRepeats',
  'dropRepeatsBy',
  'dropRepeatsWith',
  'dropWhile',
  'either',
  'empty',
  'endsWith',
  'eqBy',
  'eqProps',
  'equals',
  'evolve',
  'filter',
  'find',
  'findIndex',
  'findLast',
  'findLastIndex',
  'flatten',
  'flip',
  'forEach',
  'forEachObjIndexed',
  'fromPairs',
  'groupBy',
  'groupWith',
  'gt',
  'gte',
  'has',
  'hasIn',
  'hasPath',
  'head',
  'identical',
  'identity',
  'ifElse',
  'inc',
  'includes',
  'indexBy',
  'indexOf',
  'init',
  'innerJoin',
  'insert',
  'insertAll',
  'intersection',
  'intersperse',
  'into',
  'invert',
  'invertObj',
  'invoker',
  'is',
  'isEmpty',
  'isNil',
  'isNotNil',
  'join',
  'juxt',
  'keys',
  'keysIn',
  'last',
  'lastIndexOf',
  'length',
  'lens',
  'lensIndex',
  'lensPath',
  'lensProp',
  'lift',
  'liftN',
  'lt',
  'lte',
  'map',
  'mapAccum',
  'mapAccumRight',
  'mapObjIndexed',
  'match',
  'mathMod',
  'max',
  'maxBy',
  'mean',
  'median',
  'memoizeWith',
  'mergeAll',
  'mergeDeepLeft',
  'mergeDeepRight',
  'mergeDeepWith',
  'mergeDeepWithKey',
  'mergeLeft',
  'mergeRight',
  'mergeWith',
  'mergeWithKey',
  'min',
  'minBy',
  'modify',
  'modifyPath',
  'modulo',
  'move',
  'multiply',
  'nAry',
  'negate',
  'none',
  'not',
  'nth',
  'nthArg',
  'o',
  'objOf',
  'of',
  'omit',
  'on',
  'once',
  'or',
  'otherwise',
  'over',
  'pair',
  'partial',
  'partialObject',
  'partialRight',
  'partition',
  'path',
  'pathEq',
  'pathOr',
  'pathSatisfies',
  'paths',
  'pick',
  'pickAll',
  'pickBy',
  'pipe',
  'pipeWith',
  'pluck',
  'prepend',
  'product',
  'project',
  'promap',
  'prop',
  'propEq',
  'propIs',
  'propOr',
  'propSatisfies',
  'props',
  'range',
  'reduce',
  'reduceBy',
  'reduceRight',
  'reduceWhile',
  'reduced',
  'reject',
  'remove',
  'repeat',
  'replace',
  'reverse',
  'scan',
  'sequence',
  'set',
  'slice',
  'sort',
  'sortBy',
  'sortWith',
  'split',
  'splitAt',
  'splitEvery',
  'splitWhen',
  'splitWhenever',
  'startsWith',
  'subtract',
  'sum',
  'swap',
  'symmetricDifference',
  'symmetricDifferenceWith',
  'tail',
  'take',
  'takeLast',
  'takeLastWhile',
  'takeWhile',
  'tap',
  'test',
  'thunkify',
  'times',
  'toLower',
  'toPairs',
  'toPairsIn',
  'toString',
  'toUpper',
  'transduce',
  'transpose',
  'traverse',
  'trim',
  'tryCatch',
  'type',
  'unapply',
  'unary',
  'uncurryN',
  'unfold',
  'union',
  'unionWith',
  'uniq',
  'uniqBy',
  'uniqWith',
  'unless',
  'unnest',
  'until',
  'unwind',
  'update',
  'useWith',
  'values',
  'valuesIn',
  'view',
  'when',
  'where',
  'whereAny',
  'whereEq',
  'without',
  'xor',
  'xprod',
  'zip',
  'zipObj',
  'zipWith',
]

export const reservedWords = [...jsReservedWords, ...ramdaFnNames]

export const canBeFunction = typeStr => {
  typeStr = typeStr.toLowerCase()
  return typeStr.includes('function') || typeStr === 'any' || typeStr === '*'
}
