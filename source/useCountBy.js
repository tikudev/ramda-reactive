import { computed, unref } from 'vue'
import { countBy, curryN } from 'ramda'

/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 * 
 * Acts as a transducer if a transformer is given in list position.
 *
 * @param {import('./types').MaybeRef<Function>} fn The function used to map values to keys.
 * @param {import('./types').MaybeWatchSource<Array>} list The list to count elements from.
 * @return {import('vue').ComputedRef<Object>} An object mapping keys to number of occurrences in the list.
*/
const useCountBy = curryN(2,(fn, list) => computed(() => countBy(typeof fn === 'function' ? (...fnArgs) => unref(unref(fn)(...fnArgs)) : unref(fn), typeof list === 'function' ? list() : unref(list))))

export default useCountBy
